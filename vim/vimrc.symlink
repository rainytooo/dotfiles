"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: 
"       Vincent.wantchalk
"       http://www.wantchalk.com ohergal@gmail.com
"
" Vim version: 8.0.600
"       
" Version: 
"       3.0.4
"
" Sections:
"
"
" ChangeLog:
"       * 3.0.4 2017-06-16
"               - 增加vundle
"               - 添加python mode
"               - 添加nerdtree
"       * 3.0.3 2017-05-26
"               - 添加了wildmenu和wildmode来增强命令补全和显示补全的提示
"               - 添加了path参数,增加了**,方便查找的时候递归
"       * 3.0.2 2017-05-25
"               - 将colorscheme放到前面,这样不会覆盖statusline的颜色定义
"               - 去掉了F3定义的netrw一些配置,StatusLine配置完成
"       * 3.0.1 2017-05-23
"               - 在vim8发布以后重新配置,去掉一些插件,更原生化
" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'


" python-mode
Bundle 'klen/python-mode'

" Nerdtree
Bundle 'git://github.com/scrooloose/nerdtree.git'

" Tagbar
Bundle 'majutsushi/tagbar'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required



" when use tmux , the term color scheme will broken
if exists('$TMUX')
  set term=screen-256color
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Custom keymap settins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Better copy & paste
:set pastetoggle=<F2>

" Fast saving
nmap <leader>w :w!<cr>

" Quick quit command
noremap <Leader>q :quit<CR>                 " Quit current window
noremap <Leader>Q :qa!<CR>                  " Quit all window


"Fast reloading of the .vimrc
map <silent> <leader>ss :source ~/.vimrc<cr>
"Fast editing of .vimrc
map <silent> <leader>ee :e ~/.vimrc<cr>


" Removes highlight of your search
" noremap <C-n> :nohl<CR>
" vnoremap <C-n> :nohl<CR>
" inoremap <C-n> :nohl<CR> " conflict with word completion

" map for tab
" nmap <silent> <C-t> :tabnew<CR>
" nmap <silent> <C-n> :tabnext<CR>
" nmap <silent> <C-p> :tabprev<CR>
" imap <silent> <C-t> <esc><C-t>
" imap <silent> <C-n> <esc><C-n>
" imap <silent> <C-p> <esc><C-p>
" map <leader>tn :tabnew<cr>
" map <leader>to :tabonly<cr>
" map <leader>tc :tabclose<cr>
" map <leader>tm :tabmove
" map <Leader>N  <esc>:tabprevious<CR>
" map <Leader>n  <esc>:tabnext<CR>
" map <Leader>t0  <esc>:tabfirst<CR>
" map <Leader>t$  <esc>:tablast<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


filetype plugin indent on               " 

" The ":syntax enable" command will keep your current color settings.  This
" allows using ":highlight" commands to set your preferred colors before or
" after using this command.  If you want Vim to overrule your settings with the
" defaults, use: > :syntax on
syntax enable
syntax on

" allow backspacing over everything in insert mode  ,set bs=2  have the same effect 
set backspace=indent,eol,start

" do not keep a backup file, use versions instead
set nobackup
set nowritebackup
set noswapfile 

" set mouse=a                           " on OSX press alt and click
set history=700                         " keep 700 lines of command line history
set undolevels=700                      " undo level

set ruler                               " show the cursor position all the time
set showcmd                             " display incomplete commands


set autoread                            " auto read when file is changed from outside
" ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent                          " auto indentation
set smartindent							" auto indent for c program
" set copyindent						" copy last indent


set hlsearch                            " 开启高亮显示结果
set incsearch                           " do incremental searching
set ignorecase                          " ignore case when searching
set smartcase                           " ignore case if search pattern is all lowercase,case-sensitive otherwise

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


" swap temp file ,it's no need when you set noswapfile
set directory=~/tmp,/tmp
" path
set path+=**

" Tab settins
set smarttab                            " insert tabs on the start of a line according to context
set tabstop=4                           " 
set softtabstop=4
set shiftwidth=4
set shiftround

" set tw=79
set colorcolumn=80                      " display a column line


" highlight ColorColoumn ctermbg=233

" auto change working directory
set autochdir

" auto reload .vimrc
autocmd! bufwritepost .vimrc so ~/.vimrc

"行高亮
set cursorline

set list
" listchar
set listchars=tab:▸\ ,eol:¬


" 命令行补全以增强的方式运行,可以出现一个提示菜单,用tab,上下左右可以操作
set wildmenu
set wildmode=list:longest,full


" Syntax of these languages is fussy over tabs Vs spaces
autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Customisations based on house-style (arbitrary)
autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

" Treat .rss files as XML
autocmd BufNewFile,BufRead *.rss setfiletype xml
" Treat tpl files as HTML
autocmd BufNewFile,BufRead *.tpl if &ft == 'smarty' | set ft=html



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => color scheme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax enable
set background=dark
" colorscheme solarized
colorscheme badwolf


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nu                                  " number line
set t_Co=256                            " number of colors

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => statusline bar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 颜色参考 http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
function! HasPaste()
    if &paste
         return '[PASTE]'
    else
        return ''
    endif
endfunction

function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction



set laststatus=2                        " 始终显示状态栏

hi StatusLine ctermbg=236 ctermfg=250   cterm=NONE

set statusline=                         " start
set statusline+=%1*%{HasPaste()}         " paste
set statusline+=%3*\[%{mode()}\]        " mode
set statusline+=%*
set statusline+=\ 
set statusline+=%y                            " filetype
set statusline+=\                             " blank space
set statusline+=%m%r%h                        " modified flag [+] [RO] [help]
set statusline+=\                             " blank space
set statusline+=\[%<%-10.60(%F%)\]%w

set statusline+=%=                            " right-align from now on

" set statusline+=%3*
set statusline+=\[%{getcwd()}\]                   " show current work dir
set statusline+=\[%{&fileformat}/%{&encoding}]             " os and filetype
set statusline+=\[
set statusline+=%v                            " column number
set statusline+=\,                            " colon separator
set statusline+=%l                            " row number
set statusline+=\] 
set statusline+=\                             " blank space
set statusline+=%p%%                          " percent
set statusline+=\-                            " slash separator
set statusline+=%L                            " total number of rows
set statusline+=%*
set statusline+=\                             " blank space
set statusline+=%{winnr()}                    " buffer number

" set statusline=\ \ (%f) \ \ \ %m
" set statusline=\ %1*%{HasPaste()}%*%<%-15.25(%f%)
" set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
" set statusline+=\ \ \ [%{&ff}/%Y]
" set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
" set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L




hi User1 ctermbg=196 ctermfg=015        " 粘贴模式的颜色
hi User2 ctermbg=236 ctermfg=255
hi User3 ctermbg=010 ctermfg=255
hi User4 ctermfg=008
hi User5 ctermfg=008
hi User7 ctermfg=008
hi User8 ctermfg=008
hi User9 ctermfg=007

" 另一个方案
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => netrw as NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle Vexplore with Ctrl-E
" function! ToggleVExplorer()
"   if exists("t:expl_buf_num")
"       let expl_win_num = bufwinnr(t:expl_buf_num)
"       if expl_win_num != -1
"           let cur_win_nr = winnr()
"           exec expl_win_num . 'wincmd w'
"           close
"           exec cur_win_nr . 'wincmd w'
"           unlet t:expl_buf_num
"       else
"           unlet t:expl_buf_num
"       endif
"   else
"       exec '1wincmd w'
"       Vexplore
"       let t:expl_buf_num = bufnr("%")
"   endif
" endfunction
" map <silent> <F3> :call ToggleVExplorer()<CR>

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4    " 打开文件的方式0重用,1水平分割,2垂直分割,3新标签页,4打开前次窗口
" let g:netrw_altv = 1            " 垂直分割新窗口在右侧 
let g:netrw_winsize = 20        " 控制初始窗口大小为20%
" let g:netrw_banner = 0          " 关闭横幅
" let g:netrw_liststyle = 3       " 使用树形风格列表


" Ctag
" set tags+=./tags
" ------------------------------------------------------------
" Use tags file from ancestor directory if possible
set tags+=tags;/
" ------------------------------------------------------------
" Switch pwd to whichever file I'm current editing
autocmd BufEnter * lcd %:p:h 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTree settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" custom ignore 
let NERDTreeIgnore = ['\.pyc$','\.class$','\.so$','\.dll$']

" NERDTree Toggle
noremap <F3> :NERDTreeToggle<CR>
inoremap <F3> <ESC>:NERDTreeToggle<CR>
vnoremap <F3> <ESC>:NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => tagbar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <F8> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => python-mode
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Load the whole plugin
" let g:pymode = 1
" Load show documentation plugin
let g:pymode_doc = 1
" Key for show python documentation
let g:pymode_doc_key = 'K'
" Enable python folding
let g:pymode_folding = 1
let g:pymode_lint = 1



" Enable pymode's custom syntax highlighting
let g:pymode_syntax = 1

" Enable all python highlightings
let g:pymode_syntax_all = 1

" Highlight "print" as function
let g:pymode_syntax_print_as_function = 0

" Highlight indentation errors
let g:pymode_syntax_indent_errors = g:pymode_syntax_all

" Highlight trailing spaces
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Highlight string formatting
let g:pymode_syntax_string_formatting = g:pymode_syntax_all

" Highlight str.format syntax
let g:pymode_syntax_string_format = g:pymode_syntax_all

" Highlight string.Template syntax
let g:pymode_syntax_string_templates = g:pymode_syntax_all

" Highlight doc-tests
let g:pymode_syntax_doctests = g:pymode_syntax_all

" Highlight builtin objects (__doc__, self, etc)
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all

" Highlight builtin functions
let g:pymode_syntax_builtin_funcs = g:pymode_syntax_all

" Highlight exceptions
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all

" For fast machines
let g:pymode_syntax_slow_sync = 0
